---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-router
  namespace: {{ .Values.namespace }}
data:
  nginx.conf: |
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }

    http {
      proxy_redirect          off;
      proxy_set_header        Host            $host;
      proxy_set_header        X-Real-IP       $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      client_max_body_size    32m;
      client_body_buffer_size 128k;
      proxy_connect_timeout   90;
      proxy_send_timeout      90;
      proxy_read_timeout      90;
      proxy_buffers           32 4k;
      add_header              Content-Security-Policy "default-src 'self'; frame-ancestors 'none'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data:" always;

      server {

        listen 80;

        {{- if not .Values.public }}
        location /~ {
          return 404;
        }
        {{- end }}
        location /api/v4/ {
          proxy_pass http://dino-park-fence-service:80;
        }
        location /avatar/ {
          proxy_pass http://dino-park-fossil-service:80;
        }
        location /world/ {
          proxy_pass http://dino-park-world-service:80;
        }
        location /whoami/ {
          proxy_pass http://dino-park-whoami-service:80;
        }
        {{ if or (eq .Values.env "test") (eq .Values.env "dev") -}}
        location /preview {
          proxy_pass http://dino-park-front-end-preview-service:80;
        }
        {{ end -}}
        location /groups/ {
          proxy_pass http://dino-park-packs-service:80;
        }
        location / {
          proxy_pass http://dino-park-front-end-service:80;
        }
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: internal-router
  namespace: {{ .Values.namespace }}
  labels:
    app: internal-router
spec:
  replicas: {{ .Values.router_replicas }}
  selector:
    matchLabels:
      app: internal-router
  template:
    metadata:
      labels:
        app: internal-router
    spec:
      volumes:
      - name: nginx-router
        configMap:
          name: nginx-router
      containers:
      - name: nginx-router
        image: nginx:1.20
        ports:
        - name: http
          containerPort: 80
        env:
        - name: force_update
          value: "{{ .Values.update_ir | default 0 }}"
        volumeMounts:
        - name: nginx-router
          mountPath: /etc/nginx/
          readOnly: true

---
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    app: internal-router
  name: internal-router
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  selector:
    app: internal-router
